package database.jdbc;

import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Array;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.Date;
import java.sql.NClob;
import java.sql.ParameterMetaData;
import java.sql.PreparedStatement;
import java.sql.Ref;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.RowId;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Calendar;

import database.compile.DbAssembly;
import database.compile.DbCompiler;
import database.lexical.LexicalStream.LexicalException;
import database.syntax.AbstractSyntaxStream.SyntaxException;
import database.vm.DbContext;
import database.vm.out.JdbcVmOutputStream;

/**
 * 
 * 
 * @author Tecgraf
 */
public class DbPreparedStatement implements PreparedStatement {

  /** Contexto */
  private DbContext context;
  /** Query */
  private String currentSql;
  /** Query */
  private String orginalSql;
  /** Assembly */
  private DbAssembly assembly;
  /** */
  private int resultSetType;
  /** */
  private int resultSetConcurrency;
  /** */
  private int resultSetHoldability;
  /** */
  private boolean closed;
  /** */
  private int maxFieldSize;
  /** */
  private int maxRows;
  /** */
  private boolean escapeProcessing;
  /** Saída */
  private JdbcVmOutputStream out;
  /** Thread */
  private Thread thread;
  /** Result Set */
  private DbResultSet resultSet;
  /** Erro */
  private SQLException exception;
  /** Connection */
  private DbConnection connection;
  /** Metadata */
  private ResultSetMetaData metaData;

  /**
   * @param connection
   * @param sql
   * @param columnNames
   */
  public DbPreparedStatement(DbConnection connection, String sql,
    String[] columnNames) {
    throw new RuntimeException();
  }

  /**
   * @param connection
   * @param sql
   * @param columnIndexes
   */
  public DbPreparedStatement(DbConnection connection, String sql,
    int[] columnIndexes) {
    throw new RuntimeException();
  }

  /**
   * @param connection
   * @param sql
   * @param autoGeneratedKeys
   */
  public DbPreparedStatement(DbConnection connection, String sql,
    int autoGeneratedKeys) {
    throw new RuntimeException();
  }

  /**
   * @param connection
   * @param sql
   * @param resultSetType
   * @param resultSetConcurrency
   * @param resultSetHoldability
   */
  public DbPreparedStatement(DbConnection connection, String sql,
    int resultSetType, int resultSetConcurrency, int resultSetHoldability) {
    this.connection = connection;
    this.context = connection.getContext();
    this.currentSql = sql;
    this.orginalSql = sql;
    this.resultSetType = resultSetType;
    this.resultSetConcurrency = resultSetConcurrency;
    this.resultSetHoldability = resultSetHoldability;
  }

  /**
   * @param connection
   * @param sql
   * @param resultSetType
   * @param resultSetConcurrency
   */
  public DbPreparedStatement(DbConnection connection, String sql,
    int resultSetType, int resultSetConcurrency) {
    this(connection, sql, resultSetType, resultSetConcurrency, 0);
  }

  /**
   * @param connection
   * @param sql
   */
  public DbPreparedStatement(DbConnection connection, String sql) {
    this(connection, sql, 0, 0);
  }

  /**
   * Retorna
   * 
   * @return context
   */
  public DbContext getContext() {
    return context;
  }

  /**
   * Retorna
   * 
   * @return assembly
   */
  public DbAssembly getAssembly() {
    return assembly;
  }

  /**
   * Retorna
   * 
   * @return out
   */
  public JdbcVmOutputStream getOut() {
    return out;
  }

  /**
   * Retorna
   * 
   * @return thread
   */
  public Thread getThread() {
    return thread;
  }

  /**
   * Retorna
   * 
   * @return exception
   */
  public SQLException getException() {
    return exception;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public ResultSet executeQuery(String sql) throws SQLException {
    this.currentSql = sql;
    return this.executeQuery();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public int executeUpdate(String sql) throws SQLException {
    this.execute();
    return 0;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void close() throws SQLException {
    this.closed = true;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public int getMaxFieldSize() throws SQLException {
    return this.maxFieldSize;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setMaxFieldSize(int max) throws SQLException {
    this.maxFieldSize = max;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public int getMaxRows() throws SQLException {
    return this.maxRows;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setMaxRows(int max) throws SQLException {
    this.maxRows = max;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setEscapeProcessing(boolean enable) throws SQLException {
    this.escapeProcessing = enable;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public int getQueryTimeout() throws SQLException {
    return 0;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setQueryTimeout(int seconds) throws SQLException {
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void cancel() throws SQLException {
    throw new SQLException();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public SQLWarning getWarnings() throws SQLException {
    return null;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void clearWarnings() throws SQLException {
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setCursorName(String name) throws SQLException {
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public boolean execute(String sql) throws SQLException {
    if (this.closed) {
      throw new IllegalStateException("closed");
    }
    try {
      if (this.assembly == null) {
        this.assembly = new DbCompiler().compile(context, sql);
        assembly.disassembly(System.out);
      }
      this.out = new JdbcVmOutputStream();
      this.thread = new Thread("DbConnection:PreparedStatement:Vm") {
        @Override
        public void run() {
          try {
            assembly.execute(context, new DataOutputStream(out));
          }
          catch (Throwable e) {
            exception = new SQLException(e);
          }
        }
      };
      this.thread.start();
      this.resultSet = new DbResultSet(this);
      return true;
    }
    catch (LexicalException e) {
      throw new SQLException(e);
    }
    catch (IOException e) {
      throw new SQLException(e);
    }
    catch (SyntaxException e) {
      throw new SQLException(e);
    }
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public ResultSet getResultSet() throws SQLException {
    if (this.resultSet == null) {
      throw new IllegalStateException();
    }
    if (exception != null) {
      throw exception;
    }
    return this.resultSet;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public int getUpdateCount() throws SQLException {
    return 0;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public boolean getMoreResults() throws SQLException {
    return false;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setFetchDirection(int direction) throws SQLException {
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public int getFetchDirection() throws SQLException {
    return 0;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setFetchSize(int rows) throws SQLException {
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public int getFetchSize() throws SQLException {
    return 1;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public int getResultSetConcurrency() throws SQLException {
    return this.resultSetConcurrency;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public int getResultSetType() throws SQLException {
    return this.resultSetType;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void addBatch(String sql) throws SQLException {
    throw new RuntimeException();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void clearBatch() throws SQLException {
    throw new RuntimeException();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public int[] executeBatch() throws SQLException {
    throw new RuntimeException();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Connection getConnection() throws SQLException {
    return this.connection;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public boolean getMoreResults(int current) throws SQLException {
    return false;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public ResultSet getGeneratedKeys() throws SQLException {
    return null;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public int executeUpdate(String sql, int autoGeneratedKeys)
    throws SQLException {
    this.execute(sql);
    if (exception != null) {
      throw exception;
    }
    return 0;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
    this.execute(sql);
    if (exception != null) {
      throw exception;
    }
    return 0;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public int executeUpdate(String sql, String[] columnNames)
    throws SQLException {
    this.execute(sql);
    if (exception != null) {
      throw exception;
    }
    return 0;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
    this.execute(sql);
    if (exception != null) {
      throw exception;
    }
    return true;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public boolean execute(String sql, int[] columnIndexes) throws SQLException {
    this.execute(sql);
    if (exception != null) {
      throw exception;
    }
    return true;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public boolean execute(String sql, String[] columnNames) throws SQLException {
    this.execute(sql);
    if (exception != null) {
      throw exception;
    }
    return true;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public int getResultSetHoldability() throws SQLException {
    return this.resultSetHoldability;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public boolean isClosed() throws SQLException {
    if (exception != null) {
      throw exception;
    }
    return this.closed;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setPoolable(boolean poolable) throws SQLException {
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public boolean isPoolable() throws SQLException {
    return false;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void closeOnCompletion() throws SQLException {
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public boolean isCloseOnCompletion() throws SQLException {
    return false;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public <T> T unwrap(Class<T> iface) throws SQLException {
    return null;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public boolean isWrapperFor(Class<?> iface) throws SQLException {
    return false;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public ResultSet executeQuery() throws SQLException {
    this.execute(currentSql);
    if (exception != null) {
      throw exception;
    }
    return resultSet;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public int executeUpdate() throws SQLException {
    this.execute(currentSql);
    if (exception != null) {
      throw exception;
    }
    return 0;
  }

  /**
   * @param parameterIndex
   * @param value
   * @throws SQLException
   */
  public void setValue(int parameterIndex, String value) throws SQLException {
    int index = 0;
    while (parameterIndex > 0) {
      index = currentSql.indexOf('?', index);
      if (index < 0) {
        throw new SQLException("" + parameterIndex);
      }
      parameterIndex--;
    }
    currentSql =
      currentSql.substring(0, index) + value + currentSql.substring(index + 1);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setNull(int parameterIndex, int sqlType) throws SQLException {
    this.setValue(parameterIndex, "null");
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setBoolean(int parameterIndex, boolean x) throws SQLException {
    this.setValue(parameterIndex, Boolean.toString(x));
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setByte(int parameterIndex, byte x) throws SQLException {
    this.setValue(parameterIndex, Byte.toString(x));
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setShort(int parameterIndex, short x) throws SQLException {
    this.setValue(parameterIndex, Short.toString(x));
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setInt(int parameterIndex, int x) throws SQLException {
    this.setValue(parameterIndex, Integer.toString(x));
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setLong(int parameterIndex, long x) throws SQLException {
    this.setValue(parameterIndex, Long.toString(x));
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setFloat(int parameterIndex, float x) throws SQLException {
    this.setValue(parameterIndex, Float.toString(x));
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setDouble(int parameterIndex, double x) throws SQLException {
    this.setValue(parameterIndex, Double.toString(x));
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setBigDecimal(int parameterIndex, BigDecimal x)
    throws SQLException {
    this.setValue(parameterIndex, x.toString());
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setString(int parameterIndex, String x) throws SQLException {
    this.setValue(parameterIndex, "\"" + x + "\"");
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setBytes(int parameterIndex, byte[] x) throws SQLException {
    throw new RuntimeException();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setDate(int parameterIndex, Date x) throws SQLException {
    throw new RuntimeException();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setTime(int parameterIndex, Time x) throws SQLException {
    throw new RuntimeException();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setTimestamp(int parameterIndex, Timestamp x) throws SQLException {
    throw new RuntimeException();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setAsciiStream(int parameterIndex, InputStream x, int length)
    throws SQLException {
    throw new RuntimeException();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setUnicodeStream(int parameterIndex, InputStream x, int length)
    throws SQLException {
    throw new RuntimeException();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setBinaryStream(int parameterIndex, InputStream x, int length)
    throws SQLException {
    throw new RuntimeException();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void clearParameters() throws SQLException {
    this.currentSql = this.orginalSql;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setObject(int parameterIndex, Object x, int targetSqlType)
    throws SQLException {
    throw new RuntimeException();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setObject(int parameterIndex, Object x) throws SQLException {
    throw new RuntimeException();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public boolean execute() throws SQLException {
    return this.execute(currentSql);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void addBatch() throws SQLException {
    throw new RuntimeException();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setCharacterStream(int parameterIndex, Reader reader, int length)
    throws SQLException {
    throw new RuntimeException();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setRef(int parameterIndex, Ref x) throws SQLException {
    throw new RuntimeException();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setBlob(int parameterIndex, Blob x) throws SQLException {
    throw new RuntimeException();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setClob(int parameterIndex, Clob x) throws SQLException {
    throw new RuntimeException();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setArray(int parameterIndex, Array x) throws SQLException {
    throw new RuntimeException();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public ResultSetMetaData getMetaData() throws SQLException {

    return this.metaData;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setDate(int parameterIndex, Date x, Calendar cal)
    throws SQLException {
    throw new RuntimeException();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setTime(int parameterIndex, Time x, Calendar cal)
    throws SQLException {
    throw new RuntimeException();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal)
    throws SQLException {
    throw new RuntimeException();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setNull(int parameterIndex, int sqlType, String typeName)
    throws SQLException {
    throw new RuntimeException();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setURL(int parameterIndex, URL x) throws SQLException {
    throw new RuntimeException();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public ParameterMetaData getParameterMetaData() throws SQLException {
    throw new RuntimeException();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setRowId(int parameterIndex, RowId x) throws SQLException {
    throw new RuntimeException();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setNString(int parameterIndex, String value) throws SQLException {
    throw new RuntimeException();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setNCharacterStream(int parameterIndex, Reader value, long length)
    throws SQLException {
    throw new RuntimeException();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setNClob(int parameterIndex, NClob value) throws SQLException {
    throw new RuntimeException();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setClob(int parameterIndex, Reader reader, long length)
    throws SQLException {
    throw new RuntimeException();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setBlob(int parameterIndex, InputStream inputStream, long length)
    throws SQLException {
    throw new RuntimeException();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setNClob(int parameterIndex, Reader reader, long length)
    throws SQLException {
    throw new RuntimeException();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setSQLXML(int parameterIndex, SQLXML xmlObject)
    throws SQLException {
    throw new RuntimeException();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setObject(int parameterIndex, Object x, int targetSqlType,
    int scaleOrLength) throws SQLException {
    throw new RuntimeException();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setAsciiStream(int parameterIndex, InputStream x, long length)
    throws SQLException {
    throw new RuntimeException();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setBinaryStream(int parameterIndex, InputStream x, long length)
    throws SQLException {
    throw new RuntimeException();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setCharacterStream(int parameterIndex, Reader reader, long length)
    throws SQLException {
    throw new RuntimeException();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setAsciiStream(int parameterIndex, InputStream x)
    throws SQLException {
    throw new RuntimeException();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setBinaryStream(int parameterIndex, InputStream x)
    throws SQLException {
    throw new RuntimeException();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setCharacterStream(int parameterIndex, Reader reader)
    throws SQLException {
    throw new RuntimeException();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setNCharacterStream(int parameterIndex, Reader value)
    throws SQLException {
    throw new RuntimeException();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setClob(int parameterIndex, Reader reader) throws SQLException {
    throw new RuntimeException();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setBlob(int parameterIndex, InputStream inputStream)
    throws SQLException {
    throw new RuntimeException();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void setNClob(int parameterIndex, Reader reader) throws SQLException {
    throw new RuntimeException();
  }

}
